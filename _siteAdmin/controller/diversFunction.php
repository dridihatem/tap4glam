<?php////////////////////////////function extraireTxt($txt,$max){	if (strlen($txt)>$max) {$newTxt = substr($txt, 0, $max);	$newTxt .= "&hellip;";}	else {$newTxt = $txt;}return $newTxt;}////////////////////////////function extraireArt($txt,$max){	if (strlen($txt)>$max) {$newTxt = substr($txt, 3, $max);}	else {$newTxt = $txt;}return $newTxt;}////////////////////////////function showTxt($txt,$min){	$newTxt = substr($txt, $min);return $newTxt;}////////////////////////////function extraireTitle($title){	if (strlen($title)>70) {$newTitle = substr($title, 0, 70);	$newTitle .= "&hellip;";}	else {$newTitle = $title;}return $newTitle;}///////////////////////////function datefr($date) { 	$split = explode(" ",$date);	$dte = $split[0];	$split = explode("-",$dte);	$annee = $split[0];	$mois = $split[1];	$jour = $split[2];return $jour."/".$mois."/".$annee; }///////////////////////////function dateEn($date) { 	$split = explode(" ",$date);	$dte = $split[0];	$split = explode("-",$dte);	$annee = $split[0];	$mois = $split[2];	$jour = $split[1];return $jour."-".$mois."-".$annee; }///////////////////function sendMail($mail,$titre,$body){mail ($mail,$titre,$body);return $mail;}//////////////////function renameTitre($str, $charset='utf-8'){    $str = htmlentities($str, ENT_NOQUOTES, $charset);    $str = preg_replace('#\&([A-za-z])(?:acute|cedil|circ|grave|ring|tilde|uml)\;#', '\1', $str);    $str = preg_replace('#\&([A-za-z]{2})(?:lig)\;#', '\1', $str);    $str = preg_replace('#\&[^;]+\;#', '', $str);	$str = preg_replace('#[^a-zA-Z0-9\-\._]#', '-', $str);    return strtolower($str);}/////////////////function tailleFichier($fichier){	$taille_fichier = filesize($fichier);	if ($taille_fichier >= 1073741824) {$taille_fichier = round($taille_fichier / 1073741824 * 100) / 100 . " Go";}	elseif ($taille_fichier >= 1048576){ $taille_fichier = round($taille_fichier / 1048576 * 100) / 100 . " Mo";}	elseif ($taille_fichier >= 1024) {$taille_fichier = round($taille_fichier / 1024 * 100) / 100 . " Ko";}	else {$taille_fichier = $taille_fichier . " o";} 	return $taille_fichier;}///////////////////////////////function extraireDate($dte,$min,$max){	$dte = substr($dte, $min, $max);return $dte;}function formatDate($date) { 	$split = split(" ",$date);	$dte = $split[0];	$split = split("-",$dte);	$annee = $split[0];	$mois = $split[1];	$jour = $split[2];return $annee.$mois.$jour; }function formatInverseDate($date) { 	$date = extraireDate($date,0,4)."-".extraireDate($date,4,2)."-".extraireDate($date,6,2);	return $date;}/////////////////////////////////////////////////////////function formatedTxt($txt){ $txtFormated = ereg_replace("<[^>]*>", "", trim(strip_tags($txt)));  return $txtFormated;}////////////////////////////////////////////////////////function deleteLastChar($str) { $newStr=array();for ($i=0;$i<(strlen($str)-1);$i++) {$newStr[$i]=$str[$i];}$newChaine = NULL;for ($i=0;$i<count($newStr);$i++) {$newChaine .= $newStr[$i];}return $newChaine;}function gplus_count( $url ) {    /* get source for custom +1 button */    $contents = file_get_contents( 'https://plusone.google.com/_/+1/fastbutton?url=' .  $url );     /* pull out count variable with regex */    preg_match( '/window\.__SSR = {c: ([\d]+)/', $contents, $matches );     /* if matched, return count, else zed */    if( isset( $matches[0] ) )         return (int) str_replace( 'window.__SSR = {c: ', '', $matches[0] );    return 0;}function twitter_count($screen_name){     $data = file_get_contents("https://cdn.api.twitter.com/1/users/lookup.json?screen_name=" . $screen_name);    $data = json_decode($data, true);    return $data[0];}function fb_count($value='') {    if($value){     $url='http://api.facebook.com/method/fql.query?query=SELECT fan_count FROM page WHERE';     if(is_numeric($value)) { $qry=' page_id="'.$value.'"';} //If value is a page ID     else {$qry=' username="'.$value.'"';} //If value is not a ID.      $xml = @simplexml_load_file($url.$qry) or die ("invalid operation");     $fb_count = $xml->page->fan_count;     return $fb_count;  }else{    return '0';  }}function resize_image_crop($image,$width,$height) {      $w = @imagesx($image); //current width     $h = @imagesy($image); //current height      if ((!$w) || (!$h)) { $GLOBALS['errors'][] = 'Image couldn\'t be resized because it wasn\'t a valid image.'; return false; }     if (($w == $width) && ($h == $height)) { return $image; } //no resizing needed              //try max width first...      $ratio = $width / $w;      $new_w = $width;      $new_h = $h * $ratio;          //if that created an image smaller than what we wanted, try the other way      if ($new_h < $height) {         $ratio = $height / $h;          $new_h = $height;          $new_w = $w * $ratio;      }           $image2 = imagecreatetruecolor ($new_w, $new_h);      imagecopyresampled($image2,$image, 0, 0, 0, 0, $new_w, $new_h, $w, $h);        //check to see if cropping needs to happen     if (($new_h != $height) || ($new_w != $width)) {         $image3 = imagecreatetruecolor ($width, $height);         if ($new_h > $height) { //crop vertically              $extra = $new_h - $height;              $x = 0; //source x              $y = round($extra / 2); //source y              imagecopyresampled($image3,$image2, 0, 0, $x, $y, $width, $height, $width, $height);          } else {              $extra = $new_w - $width;              $x = round($extra / 2); //source x             $y = 0; //source y             imagecopyresampled($image3,$image2, 0, 0, $x, $y, $width, $height, $width, $height);          }          imagedestroy($image2);          return $image3;      } else {         return $image2;      }  }    //create zip  /* creates a compressed zip file */function create_zip($files = array(),$destination = '',$overwrite = false) {  //if the zip file already exists and overwrite is false, return false  if(file_exists($destination) && !$overwrite) { return false; }  //vars  $valid_files = array();  //if files were passed in...  if(is_array($files)) {    //cycle through each file    foreach($files as $file) {      //make sure the file exists      if(file_exists($file)) {        $valid_files[] = $file;      }    }  }  //if we have good files...  if(count($valid_files)) {    //create the archive    $zip = new ZipArchive();    if($zip->open($destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) {      return false;    }    //add the files    foreach($valid_files as $file) {      $zip->addFile($file,$file);    }    //debug    //echo 'The zip archive contains ',$zip->numFiles,' files with a status of ',$zip->status;        //close the zip -- done!    $zip->close();        //check to make sure the file exists    return file_exists($destination);  }  else  {    return false;  }}?>